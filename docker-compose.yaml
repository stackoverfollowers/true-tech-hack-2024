version: '3.9'
services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [CMD-SHELL, pg_isready -U $POSTGRES_USER -d $POSTGRES_DB]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD

  backend:
    build:
      context: .
      dockerfile: docker/backend/backend.dockerfile
    restart: unless-stopped
    environment:
      APP_HTTP_HOST: 0.0.0.0
      APP_HTTP_PORT: 8000

      APP_DB_PG_DSN: postgresql+asyncpg://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB
      APP_REDIS_REDIS_DSN: redis://redis:6379

      APP_SECURITY_SECRET: $APP_SECURITY_SECRET
      APP_SECURITY_PRIVATE_KEY: $APP_SECURITY_PRIVATE_KEY

      APP_LOG_LEVEL: info
      APP_LOG_FORMAT: json

      APP_AMQP_DSN: $APP_AMQP_DSN

    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/frontend.dockerfile
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend

volumes:
  db-data:
